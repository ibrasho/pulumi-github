// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource allows you to create and manage projects for GitHub organization.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-github/blob/master/website/docs/r/organization_project.html.markdown.
type OrganizationProject struct {
	s *pulumi.ResourceState
}

// NewOrganizationProject registers a new resource with the given unique name, arguments, and options.
func NewOrganizationProject(ctx *pulumi.Context,
	name string, args *OrganizationProjectArgs, opts ...pulumi.ResourceOpt) (*OrganizationProject, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["body"] = nil
		inputs["name"] = nil
	} else {
		inputs["body"] = args.Body
		inputs["name"] = args.Name
	}
	inputs["etag"] = nil
	inputs["url"] = nil
	s, err := ctx.RegisterResource("github:index/organizationProject:OrganizationProject", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &OrganizationProject{s: s}, nil
}

// GetOrganizationProject gets an existing OrganizationProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationProject(ctx *pulumi.Context,
	name string, id pulumi.ID, state *OrganizationProjectState, opts ...pulumi.ResourceOpt) (*OrganizationProject, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["body"] = state.Body
		inputs["etag"] = state.Etag
		inputs["name"] = state.Name
		inputs["url"] = state.Url
	}
	s, err := ctx.ReadResource("github:index/organizationProject:OrganizationProject", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &OrganizationProject{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *OrganizationProject) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *OrganizationProject) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The body of the project.
func (r *OrganizationProject) Body() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["body"])
}

func (r *OrganizationProject) Etag() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["etag"])
}

// The name of the project.
func (r *OrganizationProject) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// URL of the project
func (r *OrganizationProject) Url() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["url"])
}

// Input properties used for looking up and filtering OrganizationProject resources.
type OrganizationProjectState struct {
	// The body of the project.
	Body interface{}
	Etag interface{}
	// The name of the project.
	Name interface{}
	// URL of the project
	Url interface{}
}

// The set of arguments for constructing a OrganizationProject resource.
type OrganizationProjectArgs struct {
	// The body of the project.
	Body interface{}
	// The name of the project.
	Name interface{}
}
