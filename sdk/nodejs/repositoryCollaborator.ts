// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RepositoryCollaborator extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryCollaborator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryCollaboratorState, opts?: pulumi.CustomResourceOptions): RepositoryCollaborator {
        return new RepositoryCollaborator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:index/repositoryCollaborator:RepositoryCollaborator';

    /**
     * Returns true if the given object is an instance of RepositoryCollaborator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RepositoryCollaborator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryCollaborator.__pulumiType;
    }

    public /*out*/ readonly invitationId!: pulumi.Output<string>;
    public readonly permission!: pulumi.Output<string | undefined>;
    public readonly repository!: pulumi.Output<string>;
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a RepositoryCollaborator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryCollaboratorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryCollaboratorArgs | RepositoryCollaboratorState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as RepositoryCollaboratorState | undefined;
            inputs["invitationId"] = state ? state.invitationId : undefined;
            inputs["permission"] = state ? state.permission : undefined;
            inputs["repository"] = state ? state.repository : undefined;
            inputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as RepositoryCollaboratorArgs | undefined;
            if (!args || args.repository === undefined) {
                throw new Error("Missing required property 'repository'");
            }
            if (!args || args.username === undefined) {
                throw new Error("Missing required property 'username'");
            }
            inputs["permission"] = args ? args.permission : undefined;
            inputs["repository"] = args ? args.repository : undefined;
            inputs["username"] = args ? args.username : undefined;
            inputs["invitationId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(RepositoryCollaborator.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RepositoryCollaborator resources.
 */
export interface RepositoryCollaboratorState {
    readonly invitationId?: pulumi.Input<string>;
    readonly permission?: pulumi.Input<string>;
    readonly repository?: pulumi.Input<string>;
    readonly username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RepositoryCollaborator resource.
 */
export interface RepositoryCollaboratorArgs {
    readonly permission?: pulumi.Input<string>;
    readonly repository: pulumi.Input<string>;
    readonly username: pulumi.Input<string>;
}
